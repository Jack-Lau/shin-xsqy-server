/*
 * Created 2017-2-16 19:11:14
 */
package cn.com.yting.kxy.battle.executor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.swing.JOptionPane;

import cn.com.yting.kxy.battle.UnitBuilder;
import cn.com.yting.kxy.battle.executor.model.UnitModel;
import cn.com.yting.kxy.battle.robot.Robot;
import cn.com.yting.kxy.battle.skill.resource.SkillParam;
import cn.com.yting.kxy.core.parameter.ParameterNameConstants;
import cn.com.yting.kxy.core.parameter.SimpleParameter;
import cn.com.yting.kxy.core.resource.ResourceContext;
import cn.com.yting.kxy.core.resource.ResourceContextHolder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Azige
 */
public class UnitConfigurationPanel extends javax.swing.JPanel {

    private static final Logger LOG = LoggerFactory.getLogger(UnitConfigurationPanel.class);
    private ParameterEditorDialog parameterEditorDialog = new ParameterEditorDialog();
    private SkillEditorDialog skillEditorDialog = new SkillEditorDialog();
    private Map<String, Double> parameterMap = new HashMap<>();
    private List<SkillParam> skillParams = new ArrayList<>();
    private Long robotId;
    private Robot robot;
    private UnitConfigClipboardHandler clipboardHandler;

    /**
     * Creates new form UnitConfigurationPanel
     */
    public UnitConfigurationPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectRobotPopupMenu = new javax.swing.JPopupMenu();
        disableRobotMenuItem = new javax.swing.JMenuItem();
        selectRobotByIdMenuItem = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        hpTextField = new javax.swing.JTextField();
        物伤TextField = new javax.swing.JTextField();
        物防TextField = new javax.swing.JTextField();
        法伤TextField = new javax.swing.JTextField();
        法防TextField = new javax.swing.JTextField();
        速度TextField = new javax.swing.JTextField();
        allParameterButton = new javax.swing.JButton();
        skillButton = new javax.swing.JButton();
        robotButton = new javax.swing.JButton();
        robotIdLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        levelField = new javax.swing.JTextField();
        enableCheckBox = new javax.swing.JCheckBox();
        pasteButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();

        disableRobotMenuItem.setText("不使用");
        disableRobotMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableRobotMenuItemActionPerformed(evt);
            }
        });
        selectRobotPopupMenu.add(disableRobotMenuItem);

        selectRobotByIdMenuItem.setText("按id加载");
        selectRobotByIdMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRobotByIdMenuItemActionPerformed(evt);
            }
        });
        selectRobotPopupMenu.add(selectRobotByIdMenuItem);

        jLabel1.setText("名字");

        nameTextField.setText("路人");

        jLabel2.setText("生命");

        jLabel4.setText("物伤");

        jLabel5.setText("物防");

        jLabel6.setText("法伤");

        jLabel7.setText("法防");

        jLabel10.setText("速度");

        hpTextField.setText("100");
        hpTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        物伤TextField.setText("100");
        物伤TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        物防TextField.setText("100");
        物防TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        法伤TextField.setText("100");
        法伤TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        法防TextField.setText("100");
        法防TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        速度TextField.setText("100");
        速度TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        allParameterButton.setText("全部参数");
        allParameterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allParameterButtonActionPerformed(evt);
            }
        });

        skillButton.setText("技能列表");
        skillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillButtonActionPerformed(evt);
            }
        });

        robotButton.setText("Robot");
        robotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robotButtonActionPerformed(evt);
            }
        });

        robotIdLabel.setText("无");

        jLabel11.setText("等级");

        levelField.setText("100");
        levelField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberInputCheck(evt);
            }
        });

        enableCheckBox.setSelected(true);
        enableCheckBox.setText("启用");
        enableCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                enableCheckBoxStateChanged(evt);
            }
        });

        pasteButton.setText("粘贴");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        copyButton.setText("复制");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(速度TextField)
                    .addComponent(hpTextField)
                    .addComponent(物伤TextField)
                    .addComponent(物防TextField)
                    .addComponent(法伤TextField)
                    .addComponent(法防TextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(levelField)
                        .addContainerGap())))
            .addComponent(allParameterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(skillButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enableCheckBox)
                        .addGap(31, 31, 31)
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pasteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(robotButton)
                        .addGap(18, 18, 18)
                        .addComponent(robotIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableCheckBox)
                    .addComponent(pasteButton)
                    .addComponent(copyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(levelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(物伤TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(物防TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(法伤TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(法防TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(速度TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allParameterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skillButton)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(robotButton)
                    .addComponent(robotIdLabel))
                .addGap(77, 77, 77))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void numberInputCheck(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberInputCheck
        char keyChar = evt.getKeyChar();
        if (!(keyChar >= '0' && keyChar <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_numberInputCheck

    private void robotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robotButtonActionPerformed
        selectRobotPopupMenu.show(robotButton, 0, robotButton.getHeight());
    }//GEN-LAST:event_robotButtonActionPerformed

    private void allParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allParameterButtonActionPerformed
        saveBaseParametersToMap();
        parameterMap = parameterEditorDialog.doEdit(parameterMap);
        loadBaseParametersFromMap();
    }//GEN-LAST:event_allParameterButtonActionPerformed

    private void skillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillButtonActionPerformed
        skillEditorDialog.setLocationRelativeTo(this);
        skillParams = skillEditorDialog.doEdit(skillParams);
    }//GEN-LAST:event_skillButtonActionPerformed

    private void enableCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enableCheckBoxStateChanged
        Stream.of(getComponents()).forEach(c -> {
            if (c != enableCheckBox) {
                c.setEnabled(enableCheckBox.isSelected());
            }
        });
    }//GEN-LAST:event_enableCheckBoxStateChanged

    private void selectRobotByIdMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRobotByIdMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "输入robot脚本的id");
        if (input != null) {
            try {
                long id = Long.parseLong(input);
                ResourceContext context = ResourceContextHolder.getResourceContext();
                robot = context.getLoader(Robot.class).get(id);
                if (robot == null) {
                    JOptionPane.showMessageDialog(this, "找不到robot脚本，id=" + id);
                } else {
                    robotId = id;
                    robotIdLabel.setText(String.valueOf(id));
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "id格式有误");
            }
        }
    }//GEN-LAST:event_selectRobotByIdMenuItemActionPerformed

    private void disableRobotMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableRobotMenuItemActionPerformed
        robotId = null;
        robot = null;
        robotIdLabel.setText("无");
    }//GEN-LAST:event_disableRobotMenuItemActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        clipboardHandler.copy(toUnitModel());
    }//GEN-LAST:event_copyButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        UnitModel model = clipboardHandler.paste();
        if (model == null) {
            return;
        }
        parameterMap = new HashMap<>(model.getParameterMap());
        loadBaseParametersFromMap();
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void saveBaseParametersToMap() {
        parameterMap.put(ParameterNameConstants.等级, Double.parseDouble(levelField.getText()));
        parameterMap.put(ParameterNameConstants.最大生命, Double.parseDouble(hpTextField.getText()));
        parameterMap.put(ParameterNameConstants.物伤, Double.parseDouble(物伤TextField.getText()));
        parameterMap.put(ParameterNameConstants.物防, Double.parseDouble(物防TextField.getText()));
        parameterMap.put(ParameterNameConstants.法伤, Double.parseDouble(法伤TextField.getText()));
        parameterMap.put(ParameterNameConstants.法防, Double.parseDouble(法防TextField.getText()));
        parameterMap.put(ParameterNameConstants.速度, Double.parseDouble(速度TextField.getText()));
    }

    private void loadBaseParametersFromMap() {
        if (parameterMap.containsKey(ParameterNameConstants.等级)) {
            if (parameterMap.get(ParameterNameConstants.等级) != null) {
                levelField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.等级).intValue()));
            }
        }
        hpTextField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.最大生命).intValue()));
        物伤TextField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.物伤).intValue()));
        物防TextField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.物防).intValue()));
        法伤TextField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.法伤).intValue()));
        法防TextField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.法防).intValue()));
        速度TextField.setText(String.valueOf(parameterMap.get(ParameterNameConstants.速度).intValue()));
    }

    public Robot getRobot() {
        return robot;
    }

    public void lockEnableCheckBox() {
        enableCheckBox.setEnabled(false);
    }

    public boolean isInUse() {
        return enableCheckBox.isSelected();
    }

    void setInUse(boolean value) {
        enableCheckBox.setSelected(value);
    }

    public String getUnitName() {
        return nameTextField.getText();
    }

    public void setUnitName(String name) {
        nameTextField.setText(name);
    }

    public void setParameterMap(Map<String, Double> parameterMap) {
        this.parameterMap = new HashMap<>(parameterMap);
        loadBaseParametersFromMap();
    }

    public void setClipboardHandler(UnitConfigClipboardHandler clipboardHandler) {
        this.clipboardHandler = clipboardHandler;
    }

    public void exportUnit(UnitBuilder<?> unitBuilder) {
        int level = Integer.parseInt(levelField.getText());
        saveBaseParametersToMap();
        unitBuilder.name(nameTextField.getText())
                .parameter(
                        parameterMap.entrySet().stream()
                                .map(entry -> new SimpleParameter(entry.getKey(), entry.getValue()))
                                .collect(Collectors.toList())
                );
        skillParams.stream()
                .map(sp -> sp.createSkill(level))
                .forEach(unitBuilder::skill);
    }

    public UnitModel toUnitModel() {
        saveBaseParametersToMap();
        return new UnitModel(
                nameTextField.getText(),
                Integer.parseInt(levelField.getText()),
                parameterMap,
                skillParams.stream().map(SkillParam::getId).collect(Collectors.toList()),
                robotId
        );
    }

    public void configByUnitModel(UnitModel unitModel) {
        ResourceContext context = ResourceContextHolder.getResourceContext();
        nameTextField.setText(unitModel.getName());
        levelField.setText(unitModel.getLevel() + "");
        parameterMap = unitModel.getParameterMap();
        skillParams.clear();
        for (long id : unitModel.getSkillIds()) {
            skillParams.add(context.getLoader(SkillParam.class).get(id));
        }
        if (unitModel.getRobotId() != null) {
            robotId = unitModel.getRobotId();
            robot = context.getLoader(Robot.class).get(robotId);
            robotIdLabel.setText(String.valueOf(robotId));
        } else {
            robotId = null;
            robot = null;
            robotIdLabel.setText("无");
        }
        loadBaseParametersFromMap();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allParameterButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JMenuItem disableRobotMenuItem;
    private javax.swing.JCheckBox enableCheckBox;
    private javax.swing.JTextField hpTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField levelField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton robotButton;
    private javax.swing.JLabel robotIdLabel;
    private javax.swing.JMenuItem selectRobotByIdMenuItem;
    private javax.swing.JPopupMenu selectRobotPopupMenu;
    private javax.swing.JButton skillButton;
    private javax.swing.JTextField 法伤TextField;
    private javax.swing.JTextField 法防TextField;
    private javax.swing.JTextField 物伤TextField;
    private javax.swing.JTextField 物防TextField;
    private javax.swing.JTextField 速度TextField;
    // End of variables declaration//GEN-END:variables
}
